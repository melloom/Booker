rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && (
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'super_admin') ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin')
      );
    }
    
    function isManager() {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/managers/$(request.auth.uid)) ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager')
      );
    }
    
    function isUser() {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/regular_users/$(request.auth.uid)) ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user')
      );
    }

    function isAdminOrManager() {
      return isAdmin() || isManager();
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'role']) &&
        request.resource.data.email is string &&
        request.resource.data.firstName is string &&
        request.resource.data.lastName is string &&
        request.resource.data.role in ['admin', 'manager', 'user'];
    }

    function isValidNewUserData() {
      return request.resource.data.keys().hasAll(['email', 'firstName', 'lastName']) &&
        request.resource.data.email is string &&
        request.resource.data.firstName is string &&
        request.resource.data.lastName is string;
    }

    // User Collections
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow delete: if isAdmin();
    }

    match /admins/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow create: if isAdmin() && isValidUserData();
      allow update: if isAdmin() && isValidUserData();
      allow delete: if isSuperAdmin();
    }

    match /managers/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow create: if isAdmin() && isValidUserData();
      allow update: if isAdmin() && isValidUserData();
      allow delete: if isAdmin();
    }

    match /regular_users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow delete: if isAdmin();
    }

    // User Data Collections
    match /userData/{userId}/{document=**} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
    }

    match /userPreferences/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdminOrManager());
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 